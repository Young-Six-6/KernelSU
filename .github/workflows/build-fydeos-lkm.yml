name: Build FydeOS KernelSU LKM (x86_64)
on:
  # 保留原有触发条件，扩大路径范围避免漏触发
  push:
    branches: ["main", "ci", "dev"]  # 增加常用开发分支
    paths:
      - ".github/workflows/build-fydeos-lkm.yml"
      - "kernel/**"
      - "drivers/kernelsu/**"  # 增加KernelSU核心目录监控
  pull_request:
    branches: ["main"]
    paths:
      - ".github/workflows/build-fydeos-lkm.yml"
      - "kernel/**"
      - "drivers/kernelsu/**"
  # 优化手动触发配置，支持输入参数（可选）
  workflow_dispatch:
    inputs:
      debug:
        description: "Enable debug mode"
        type: boolean
        default: false

env:
  git_tag: chromeos-5.15  # 保持内核版本一致

jobs:
  build-lkm:
    # 简化条件判断，确保手动触发时必执行
    if: |
      (github.event_name == 'workflow_dispatch') ||
      (github.event_name == 'push') ||
      (github.event_name == 'pull_request' && !github.event.pull_request.draft)
    name: Build FydeOS x86_64 KernelSU LKM
    runs-on: ubuntu-22.04  # 更换为更稳定的22.04版本（资源更充足）
    permissions:  # 显式声明权限，避免默认权限不足
      contents: read
      actions: read
      artifacts: write  # 确保能上传产物
    env:
      LTO: thin
      KERNEL_DIR: ${{ github.workspace }}/kernel

    steps:
      # 增加清理步骤，释放磁盘空间（避免 runner 空间不足）
      - name: Free up disk space
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android 2>/dev/null
          df -h

      - name: Install Build Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            bc bison build-essential ca-certificates flex git gnupg \
            libelf-dev libssl-dev lsb-release software-properties-common wget \
            libncurses-dev binutils-x86-64-linux-gnu gcc-x86-64-linux-gnu \
            rsync python3 device-tree-compiler kmod

          sudo ln -s --force python3 /usr/bin/python

          # 安装LLVM 14（保持版本一致，增加超时控制）
          export LLVM_VERSION=14
          wget --timeout=30 https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh $LLVM_VERSION
          rm ./llvm.sh
          for tool in clang ld.lld llvm-objdump llvm-ar llvm-nm llvm-strip llvm-objcopy llvm-readelf clang++; do
            sudo ln -s --force /usr/bin/$tool-$LLVM_VERSION /usr/bin/$tool
          done

      - name: Checkout KernelSU
        uses: actions/checkout@v4
        with:
          path: KernelSU
          fetch-depth: 0  # 确保能获取完整历史（计算版本用）

      - name: Setup kernel source
        run: |
          # 克隆内核源码，增加超时和重试机制
          git clone --depth=1 --branch ${{ env.git_tag }} \
            https://chromium.googlesource.com/chromiumos/third_party/kernel \
            || { echo "Clone failed, retrying..."; git clone --depth=1 --branch ${{ env.git_tag }} https://chromium.googlesource.com/chromiumos/third_party/kernel; }

      - name: Extract kernel version
        working-directory: kernel
        run: |
          VERSION=$(grep -E '^VERSION = ' Makefile | awk '{print $3}')
          PATCHLEVEL=$(grep -E '^PATCHLEVEL = ' Makefile | awk '{print $3}')
          SUBLEVEL=$(grep -E '^SUBLEVEL = ' Makefile | awk '{print $3}')
          echo "Kernel version: $VERSION.$PATCHLEVEL.$SUBLEVEL"
          echo "version=$VERSION.$PATCHLEVEL.$SUBLEVEL" >> $GITHUB_ENV

      - name: Setup KernelSU (as module)
        working-directory: kernel
        run: |
          KERNEL_ROOT=$GITHUB_WORKSPACE/kernel
          echo "[+] Kernel root: $KERNEL_ROOT"

          ln -sf $GITHUB_WORKSPACE/KernelSU/kernel $KERNEL_ROOT/drivers/kernelsu

          DRIVER_MAKEFILE=$KERNEL_ROOT/drivers/Makefile
          DRIVER_KCONFIG=$KERNEL_ROOT/drivers/Kconfig
          grep -q "kernelsu" "$DRIVER_MAKEFILE" || printf "\nobj-\$(CONFIG_KSU) += kernelsu/\n" >> "$DRIVER_MAKEFILE"
          grep -q "kernelsu" "$DRIVER_KCONFIG" || sed -i "/endmenu/i\\source \"drivers/kernelsu/Kconfig\"" "$DRIVER_KCONFIG"

          # 模块化配置（核心步骤不变）
          KSU_KCONFIG=$KERNEL_ROOT/drivers/kernelsu/Kconfig
          sed -i 's/bool "KernelSU support"/tristate "KernelSU support"/' $KSU_KCONFIG
          sed -i 's/default y/default m/' $KSU_KCONFIG

          sed -i 's/-dirty//g' $KERNEL_ROOT/scripts/setlocalversion

          cd $GITHUB_WORKSPACE/KernelSU
          KSU_VERSION=$(($(git rev-list --count HEAD) + 10200))
          echo "KernelSU version: $KSU_VERSION"
          echo "kernelsu_version=$KSU_VERSION" >> $GITHUB_ENV

      - name: Configure kernel for modules
        working-directory: kernel
        run: |
          export DEFCONFIG=x86_64_defconfig
          make LLVM=1 LLVM_IAS=1 O=${PWD} mrproper
          make LLVM=1 LLVM_IAS=1 O=${PWD} ${DEFCONFIG} < /dev/null
          scripts/config --file .config \
            -e MODULES \
            -e MODULE_UNLOAD \
            -e KSU \
            -d MODULE_SIG \
            -d MODULE_SIG_ALL \
            -e LTO_CLANG -d LTO_NONE -e LTO_CLANG_THIN

      - name: Build kernel and LKM
        working-directory: kernel
        run: |
          # 增加编译超时控制（1小时）
          timeout 3600 make LLVM=1 LLVM_IAS=1 O=${PWD} -j$(nproc) \
            bzImage modules modules_install
          echo "ko_path=${PWD}/drivers/kernelsu/kernelsu.ko" >> $GITHUB_ENV

      - name: Verify LKM
        run: |
          if [ ! -f "${{ env.ko_path }}" ]; then
            echo "Error: kernelsu.ko not found!"
            exit 1
          fi
          modinfo ${{ env.ko_path }}

      - name: Upload kernelsu.ko
        uses: actions/upload-artifact@v4
        with:
          name: kernelsu-ko-fydeos-x86_64-${{ env.version }}-ksu${{ env.kernelsu_version }}
          path: ${{ env.ko_path }}
          retention-days: 14  # 增加产物保留时间
