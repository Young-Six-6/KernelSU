name: Build FydeOS KernelSU Built-in (x86_64) with 6.6 Kernel

on:
  push:
    branches: ["main", "ci", "dev"]
    paths:
      - ".github/workflows/build-fydeos-lkm.yml"
      - "kernel/**"
      - "drivers/kernelsu/**"
  pull_request:
    branches: ["main"]
    paths:
      - ".github/workflows/build-fydeos-lkm.yml"
      - "kernel/**"
      - "drivers/kernelsu/**"
  workflow_dispatch:
    inputs:
      debug:
        description: "Enable debug mode"
        type: boolean
        default: false

env:
  git_tag: chromeos-6.6

jobs:
  build-builtin:
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      actions: read

    env:
      LTO: thin
      KERNEL_DIR: ${{ github.workspace }}/kernel

    steps:
      - name: Free up disk space
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android 2>/dev/null
          df -h

      - name: Install Build Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            bc bison build-essential ca-certificates flex git gnupg \
            libelf-dev libssl-dev lsb-release software-properties-common wget \
            libncurses-dev binutils-x86-64-linux-gnu gcc-x86-64-linux-gnu \
            rsync python3 device-tree-compiler kmod
          sudo ln -sf python3 /usr/bin/python
          pip install ast-grep-cli
          export LLVM_VERSION=16
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh $LLVM_VERSION
          rm ./llvm.sh
          for tool in cl ld.lld llvm-objdump llvm-ar llvm-nm llvm-strip llvm-objcopy llvm-readelf clang++; do
            sudo ln -sf /usr/bin/$tool-$LLVM_VERSION /usr/bin/$tool
          done

      - name: Checkout KernelSU
        uses: actions/checkout@v4
        with:
          path: KernelSU
          fetch-depth: 0

      - name: Setup 6.6 kernel source
        run: |
          git clone --depth=1 --branch ${{ env.git_tag }} \
            https://chromium.googlesource.com/chromiumos/third_party/kernel kernel

      - name: Integrate KernelSU into kernel tree
        working-directory: kernel
        run: |
          echo "[+] Integrating KernelSU into drivers/"
          rm -rf drivers/kernelsu
          ln -sf "$GITHUB_WORKSPACE/KernelSU/kernel" drivers/kernelsu

          DRIVER_MAKEFILE=drivers/Makefile
          if ! grep -q "kernelsu" "$DRIVER_MAKEFILE"; then
            echo 'obj-$(CONFIG_KSU) += kernelsu/' >> "$DRIVER_MAKEFILE"
          fi

          DRIVER_KCONFIG=drivers/Kconfig
          if ! grep -q "drivers/kernelsu/Kconfig" "$DRIVER_KCONFIG"; then
            echo 'source "drivers/kernelsu/Kconfig"' >> "$DRIVER_KCONFIG"
          fi

          # 关键修改1：恢复KSU为bool类型（仅支持内置/关闭），默认启用（y）
          sed -i 's/tristate "KernelSU support"/bool "KernelSU support"/' drivers/kernelsu/Kconfig
          sed -i 's/default m/default y/' drivers/kernelsu/Kconfig
          sed -i 's/-dirty//g' scripts/setlocalversion

      - name: Extract kernel version
        working-directory: kernel
        run: |
          VERSION=$(grep -E '^VERSION = ' Makefile | awk '{print $3}')
          PATCHLEVEL=$(grep -E '^PATCHLEVEL = ' Makefile | awk '{print $3}')
          SUBLEVEL=$(grep -E '^SUBLEVEL = ' Makefile | awk '{print $3}')
          echo "version=$VERSION.$PATCHLEVEL.$SUBLEVEL" >> $GITHUB_ENV
          cd $GITHUB_WORKSPACE/KernelSU
          KSU_VERSION=$(($(git rev-list --count HEAD) + 10200))
          echo "kernelsu_version=$KSU_VERSION" >> $GITHUB_ENV

      - name: Configure 6.6 kernel for Built-in KernelSU
        working-directory: kernel
        run: |
          export DEFCONFIG=x86_64_defconfig
          make LLVM=1 LLVM_IAS=1 O="${PWD}" mrproper
          make LLVM=1 LLVM_IAS=1 O="${PWD}" ${DEFCONFIG} < /dev/null
          printf "\n" >> drivers/media/platform/mediatek/vcodec/Kconfig
          tail -n 1 drivers/media/platform/mediatek/vcodec/Kconfig | hexdump -C

          scripts/config --file .config \
            -e MODULES \
            -e OVERLAY_FS \
            -e MODULE_UNLOAD \
            -e KSU  # 关键修改2：将KSU设为内置启用（-e = enable，替代原-m模块模式）
            -d MODULE_SIG \
            -d MODULE_SIG_ALL \
            -e LTO_CLANG_THIN \
            -d LTO_NONE \
            -d LTO_CLANG_FULL \
            -e LTO_CLANG \
            -d LTO_NONE \
            -e LTO_CLANG_THIN

          yes "" | make O="${PWD}" olddefconfig
          echo "[DEBUG] Check CONFIG_KSU in .config (must be y)"
          grep CONFIG_KSU .config || true

          # 验证KSU是否为内置模式，否则报错
          if ! grep -q "^CONFIG_KSU=y" .config; then
            echo "ERROR: CONFIG_KSU not set to built-in (y)!"
            exit 1
          fi

      - name: Apply KernelSU export symbols patch
        run: |
          cd /home/runner/work/KernelSU/KernelSU/kernel
          patch -p1 < /home/runner/work/KernelSU/KernelSU/KernelSU/patches/export_ksu_symbols.patch

      - name: Analyze kernel config
        working-directory: kernel
        run: |
          echo -e "\n===== 符号导出相关配置验证 ====="
          grep -E "^CONFIG_KALLSYMS|^CONFIG_KALLSYMS_ALL" .config || echo "ERROR: KALLSYMS 配置未启用！"
          grep -E "^CONFIG_SECURITY|^CONFIG_SECURITY_SELINUX" .config || echo "ERROR: SELinux 配置未启用！"
          grep -E "^CONFIG_EXT4_FS|^CONFIG_SECURITY_PATH" .config || echo "ERROR: 文件系统配置未启用！"
          echo "===== 内核关键配置检查 ====="
          echo "CONFIG_KSU 状态（需为 y）："
          grep "^CONFIG_KSU=" .config || echo "CONFIG_KSU 未找到！"
          echo -e "\n模块编译配置："
          grep -E "^CONFIG_MODULES|^CONFIG_MODULE_UNLOAD" .config || echo "模块配置未开启！"
          echo -e "\nLTO 优化配置："
          grep -E "^CONFIG_LTO|^CONFIG_LTO_CLANG" .config || echo "LTO 配置未找到！"
          echo -e "\nOVERLAY_FS 配置（KSU 依赖）："
          grep "^CONFIG_OVERLAY_FS=" .config || echo "CONFIG_OVERLAY_FS 未开启！"
          echo "===== .config 文件状态检查 ====="
          ls -la .config
          if [ -f ".config" ]; then
            echo ".config 文件存在，大小：$(du -sh .config)"
            grep "^CONFIG_KSU=" .config
          else
            echo "ERROR: .config 文件不存在！"
            exit 1
          fi

      - name: Build 6.6 kernel (with built-in KernelSU)
        working-directory: kernel
        run: |
          # 关键修改3：删除模块构建步骤（modules/modules_install），仅构建内核镜像
          timeout 3600 make LLVM=1 LLVM_IAS=1 O=${PWD} -j$(nproc) vmlinux
          timeout 3600 make LLVM=1 LLVM_IAS=1 O=${PWD} -j$(nproc) bzImage
          # 保存构建日志
          make LLVM=1 LLVM_IAS=1 O=${PWD} -j$(nproc) vmlinux 2>&1 | tee build-vmlinux.log
          make LLVM=1 LLVM_IAS=1 O=${PWD} -j$(nproc) bzImage 2>&1 | tee build-bzImage.log
          echo "[DEBUG] Uploading build logs for analysis"
          ls -lh build-*.log

      - name: Upload build logs
        uses: actions/upload-artifact@v4
        with:
          name: build-debug-logs
          path: kernel/build-*.log
          retention-days: 14

      - name: "Debug: list built kernel images"
        working-directory: kernel
        run: |
          echo "[DEBUG] Listing kernel images..."
          ls -la ./arch/x86/boot/bzImage  # 验证bzImage是否存在
          ls -la vmlinux

      - name: "Debug: upload config and KSU build files"
        uses: actions/upload-artifact@v4
        with:
          name: debug-config-ksu
          path: |
            kernel/.config
            kernel/drivers/kernelsu/Kconfig
            kernel/drivers/kernelsu/Makefile
          retention-days: 14

      - name: REAnalyze kernel config
        working-directory: kernel
        run: |
          echo "===== 内核关键配置检查 ====="
          echo "CONFIG_KSU 状态（需为 y）："
          grep "^CONFIG_KSU=" .config || echo "CONFIG_KSU 未找到！"
          echo -e "\n模块编译配置："
          grep -E "^CONFIG_MODULES|^CONFIG_MODULE_UNLOAD" .config || echo "模块配置未开启！"
          echo -e "\nLTO 优化配置："
          grep -E "^CONFIG_LTO|^CONFIG_LTO_CLANG" .config || echo "LTO 配置未找到！"
          echo -e "\nOVERLAY_FS 配置（KSU 依赖）："
          grep "^CONFIG_OVERLAY_FS=" .config || echo "CONFIG_OVERLAY_FS 未开启！"

      - name: Verify built-in KernelSU (check vmlinux symbols)
        working-directory: kernel
        run: |
          # 验证KernelSU符号是否已编译进内核（替代原modinfo验证）
          llvm-nm vmlinux | grep -E "ksu_|__ksu_" || echo "WARNING: KSU symbols not found in vmlinux!"

      - name: Upload kernel with built-in KernelSU (bzImage)
        uses: actions/upload-artifact@v4
        with:
          # 产物名称改为内核镜像标识，包含内核版本和KSU版本
          name: bzImage-fydeos-x86_64-${{ env.version }}-ksu${{ env.kernelsu_version }}
          path: kernel/arch/x86/boot/bzImage  # 上传内置KSU的内核镜像
          retention-days: 14