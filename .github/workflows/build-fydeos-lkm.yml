name: Build FydeOS KernelSU LKM (x86_64) with 6.6 Kernel

on:
  push:
    branches: ["main", "ci", "dev"]
    paths:
      - ".github/workflows/build-fydeos-lkm.yml"
      - "kernel/**"
      - "drivers/kernelsu/**"
  pull_request:
    branches: ["main"]
    paths:
      - ".github/workflows/build-fydeos-lkm.yml"
      - "kernel/**"
      - "drivers/kernelsu/**"
  workflow_dispatch:
    inputs:
      debug:
        description: "Enable debug mode"
        type: boolean
        default: false

env:
  git_tag: chromeos-6.6

jobs:
  build-lkm:
    if: |
      (github.event_name == 'workflow_dispatch') ||
      (github.event_name == 'push') ||
      (github.event_name == 'pull_request' && !github.event.pull_request.draft)
    name: Build FydeOS x86_64 KernelSU LKM (6.6 Kernel)
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      actions: read

    env:
      LTO: thin
      KERNEL_DIR: ${{ github.workspace }}/kernel

    steps:
      - name: Free up disk space
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android 2>/dev/null
          df -h

      - name: Install Build Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            bc bison build-essential ca-certificates flex git gnupg \
            libelf-dev libssl-dev lsb-release software-properties-common wget \
            libncurses-dev binutils-x86-64-linux-gnu gcc-x86-64-linux-gnu \
            rsync python3 device-tree-compiler kmod
          sudo ln -sf python3 /usr/bin/python
          export LLVM_VERSION=16
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh $LLVM_VERSION
          rm ./llvm.sh
          for tool in clang ld.lld llvm-objdump llvm-ar llvm-nm llvm-strip llvm-objcopy llvm-readelf clang++; do
            sudo ln -sf /usr/bin/$tool-$LLVM_VERSION /usr/bin/$tool
          done

      - name: Checkout KernelSU
        uses: actions/checkout@v4
        with:
          path: KernelSU
          fetch-depth: 0

      - name: Setup 6.6 kernel source
        run: |
          git clone --depth=1 --branch ${{ env.git_tag }} \
            https://chromium.googlesource.com/chromiumos/third_party/kernel kernel

      - name: Integrate KernelSU into kernel tree (fix Kconfig path)
        working-directory: kernel
        run: |
          echo "[+] Integrating KernelSU with correct Kconfig path"
          # 确保符号链接正确（避免相对路径问题）
          rm -rf drivers/kernelsu  # 清除可能的旧链接
          ln -sf $GITHUB_WORKSPACE/KernelSU/kernel drivers/kernelsu
          
          # 验证Kernelsu目录是否存在
          if [ ! -d "drivers/kernelsu" ]; then
            echo "Error: drivers/kernelsu directory not found!"
            exit 1
          fi
          # 验证Kconfig文件是否存在
          if [ ! -f "drivers/kernelsu/Kconfig" ]; then
            echo "Error: drivers/kernelsu/Kconfig not found!"
            exit 1
          fi
          
          # 修复Kconfig集成（使用绝对路径确保被识别）
          DRIVER_KCONFIG=drivers/Kconfig
          # 先删除可能存在的旧条目（避免重复）
          sed -i '/source "drivers\/kernelsu\/Kconfig"/d' $DRIVER_KCONFIG
          # 在Kconfig末尾添加（确保在menu外被正确解析）
          echo 'source "drivers/kernelsu/Kconfig"' >> $DRIVER_KCONFIG
          # 验证Kconfig是否添加成功
          grep "source \"drivers/kernelsu/Kconfig\"" $DRIVER_KCONFIG || { echo "Error: Failed to add Kconfig entry!"; exit 1; }
          
          # 修复Kconfig内容（确保语法正确）
          KSU_KCONFIG=drivers/kernelsu/Kconfig
          # 确保是tristate类型且无语法错误
          sed -i 's/^config KSU.*/config KSU\n\ttristate "KernelSU support"\n\tdefault m\n\tdepends on MODULES/' $KSU_KCONFIG
          # 验证Kconfig内容
          echo "[+] KSU Kconfig content:"
          cat $KSU_KCONFIG
          
          # 修复Makefile集成
          DRIVER_MAKEFILE=drivers/Makefile
          sed -i '/obj-$(CONFIG_KSU) += kernelsu\//d' $DRIVER_MAKEFILE
          echo 'obj-$(CONFIG_KSU) += kernelsu/' >> $DRIVER_MAKEFILE
          grep "obj-$(CONFIG_KSU) += kernelsu/" $DRIVER_MAKEFILE || { echo "Error: Failed to add Makefile entry!"; exit 1; }

      - name: Patch defconfig to include KSU (force)
        working-directory: kernel
        run: |
          DEFCONFIG_PATH="arch/x86/configs/x86_64_defconfig"
          cp $DEFCONFIG_PATH ${DEFCONFIG_PATH}.bak
          # 强制写入KSU和依赖
          sed -i '/CONFIG_KSU=/d' $DEFCONFIG_PATH
          sed -i '/CONFIG_MODULES=/d' $DEFCONFIG_PATH
          echo "CONFIG_MODULES=y" >> $DEFCONFIG_PATH
          echo "CONFIG_KSU=m" >> $DEFCONFIG_PATH
          # 验证defconfig
          echo "[+] Defconfig KSU entries:"
          grep -E "CONFIG_KSU|CONFIG_MODULES" $DEFCONFIG_PATH

      - name: Extract kernel version
        working-directory: kernel
        run: |
          VERSION=$(grep -E '^VERSION = ' Makefile | awk '{print $3}')
          PATCHLEVEL=$(grep -E '^PATCHLEVEL = ' Makefile | awk '{print $3}')
          SUBLEVEL=$(grep -E '^SUBLEVEL = ' Makefile | awk '{print $3}')
          echo "version=$VERSION.$PATCHLEVEL.$SUBLEVEL" >> $GITHUB_ENV
          cd $GITHUB_WORKSPACE/KernelSU
          KSU_VERSION=$(($(git rev-list --count HEAD) + 10200))
          echo "kernelsu_version=$KSU_VERSION" >> $GITHUB_ENV

      - name: Configure kernel (verify Kconfig recognition)
        working-directory: kernel
        run: |
          export DEFCONFIG=x86_64_defconfig
          make LLVM=1 LLVM_IAS=1 O=${PWD} mrproper
          
          # 生成配置前先检查Kconfig是否识别CONFIG_KSU
          echo "[+] Checking if Kconfig recognizes CONFIG_KSU..."
          if ! scripts/config --list | grep -q "CONFIG_KSU"; then
            echo "Error: Kconfig does NOT recognize CONFIG_KSU! Check Kconfig integration."
            # 输出所有已知配置项（调试用）
            echo "[+] All known config options (partial):"
            scripts/config --list | head -n 50
            exit 1
          fi
          
          # 生成配置
          make LLVM=1 LLVM_IAS=1 O=${PWD} $DEFCONFIG < /dev/null
          
          # 强制设置（最后保障）
          scripts/config --file .config --set-val KSU m
          scripts/config --file .config -e MODULES -e MODULE_UNLOAD -d MODULE_SIG
          
          # 应用配置（不自动确认，避免覆盖）
          make O=${PWD} olddefconfig < <(echo -e "n\nn")  # 拒绝可能的默认修改
          
          # 最终验证
          echo "[+] Final .config KSU check:"
          grep -E "CONFIG_KSU|CONFIG_MODULES" .config
          grep "^CONFIG_KSU=m" .config || { echo "Error: CONFIG_KSU still not set!"; exit 1; }

      - name: Build kernel and LKM
        working-directory: kernel
        run: |
          make LLVM=1 LLVM_IAS=1 O=${PWD} -j$(nproc) vmlinux
          make LLVM=1 LLVM_IAS=1 O=${PWD} -j$(nproc) modules
          mkdir -p ./modules
          make LLVM=1 LLVM_IAS=1 O=${PWD} INSTALL_MOD_PATH=./modules modules_install
          echo "ko_path=${PWD}/drivers/kernelsu/kernelsu.ko" >> $GITHUB_ENV

      - name: Verify LKM
        run: |
          if [ ! -f "${{ env.ko_path }}" ]; then
            echo "Error: kernelsu.ko not found!"
            exit 1
          fi
          modinfo ${{ env.ko_path }}

      - name: Upload kernelsu.ko
        uses: actions/upload-artifact@v4
        with:
          name: kernelsu-ko-fydeos-x86_64-${{ env.version }}-ksu${{ env.kernelsu_version }}
          path: ${{ env.ko_path }}
          retention-days: 14