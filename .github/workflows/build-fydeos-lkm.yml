name: Build FydeOS KernelSU LKM (x86_64)
on:
  push:
    branches: ["main"]
    paths:
      - ".github/workflows/build-fydeos-lkm.yml"
      - "kernel/**"
  pull_request:
    branches: ["main"]
    paths:
      - ".github/workflows/build-fydeos-lkm.yml"
      - "kernel/**"
  workflow_dispatch:

env:
  git_tag: chromeos-5.15  # FydeOS基于的ChromeOS内核版本

jobs:
  build-lkm:
    if: github.event_name != 'pull_request' || (github.event_name == 'pull_request' && !github.event.pull_request.draft)
    name: Build FydeOS x86_64 KernelSU LKM
    runs-on: ubuntu-20.04
    env:
      LTO: thin
      KERNEL_DIR: ${{ github.workspace }}/kernel

    steps:
      - name: Install Build Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            bc bison build-essential ca-certificates flex git gnupg \
            libelf-dev libssl-dev lsb-release software-properties-common wget \
            libncurses-dev binutils-x86-64-linux-gnu gcc-x86-64-linux-gnu \
            rsync python3 device-tree-compiler kmod  # 新增kmod用于modinfo验证

          # 配置Python3
          sudo ln -s --force python3 /usr/bin/python

          # 安装LLVM 14工具链
          export LLVM_VERSION=14
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh $LLVM_VERSION
          rm ./llvm.sh
          # 建立工具链符号链接
          for tool in clang ld.lld llvm-objdump llvm-ar llvm-nm llvm-strip llvm-objcopy llvm-readelf clang++; do
            sudo ln -s --force /usr/bin/$tool-$LLVM_VERSION /usr/bin/$tool
          done

      - name: Checkout KernelSU
        uses: actions/checkout@v4
        with:
          path: KernelSU
          ref: main
          fetch-depth: 0

      - name: Setup kernel source
        run: |
          # 克隆ChromeOS内核源码（FydeOS基于此）
          git clone https://chromium.googlesource.com/chromiumos/third_party/kernel -b ${{ env.git_tag }}

      - name: Extract kernel version
        working-directory: kernel
        run: |
          VERSION=$(grep -E '^VERSION = ' Makefile | awk '{print $3}')
          PATCHLEVEL=$(grep -E '^PATCHLEVEL = ' Makefile | awk '{print $3}')
          SUBLEVEL=$(grep -E '^SUBLEVEL = ' Makefile | awk '{print $3}')
          echo "Kernel version: $VERSION.$PATCHLEVEL.$SUBLEVEL"
          echo "version=$VERSION.$PATCHLEVEL.$SUBLEVEL" >> $GITHUB_ENV

      - name: Setup KernelSU (as module)
        working-directory: kernel
        run: |
          KERNEL_ROOT=$GITHUB_WORKSPACE/kernel
          echo "[+] Kernel root: $KERNEL_ROOT"

          # 链接KernelSU驱动到内核目录
          ln -sf $GITHUB_WORKSPACE/KernelSU/kernel $KERNEL_ROOT/drivers/kernelsu

          # 修改内核Makefile和Kconfig，添加KernelSU
          DRIVER_MAKEFILE=$KERNEL_ROOT/drivers/Makefile
          DRIVER_KCONFIG=$KERNEL_ROOT/drivers/Kconfig
          grep -q "kernelsu" "$DRIVER_MAKEFILE" || printf "\nobj-\$(CONFIG_KSU) += kernelsu/\n" >> "$DRIVER_MAKEFILE"
          grep -q "kernelsu" "$DRIVER_KCONFIG" || sed -i "/endmenu/i\\source \"drivers/kernelsu/Kconfig\"" "$DRIVER_KCONFIG"

          # 关键：将KernelSU配置为模块（CONFIG_KSU=m）
          KSU_KCONFIG=$KERNEL_ROOT/drivers/kernelsu/Kconfig
          sed -i 's/bool "KernelSU support"/tristate "KernelSU support"/' $KSU_KCONFIG  # 支持模块编译
          sed -i 's/default y/default m/' $KSU_KCONFIG  # 默认编译为模块

          # 移除版本号中的dirty标记
          sed -i 's/-dirty//g' $KERNEL_ROOT/scripts/setlocalversion

          # 计算KernelSU版本
          cd $GITHUB_WORKSPACE/KernelSU
          KSU_VERSION=$(($(git rev-list --count HEAD) + 10200))
          echo "KernelSU version: $KSU_VERSION"
          echo "kernelsu_version=$KSU_VERSION" >> $GITHUB_ENV

      - name: Configure kernel for modules
        working-directory: kernel
        run: |
          export DEFCONFIG=x86_64_defconfig

          # 清理并生成默认配置
          make LLVM=1 LLVM_IAS=1 O=${PWD} mrproper
          make LLVM=1 LLVM_IAS=1 O=${PWD} ${DEFCONFIG} < /dev/null

          # 启用模块支持并禁用模块签名
          scripts/config --file .config \
            -e MODULES \                   # 启用内核模块
            -e MODULE_UNLOAD \             # 允许模块卸载
            -e KSU \                       # 启用KernelSU（此时为模块模式）
            -d MODULE_SIG \                 # 禁用模块签名验证（避免加载失败）
            -d MODULE_SIG_ALL \
            -e LTO_CLANG -d LTO_NONE -e LTO_CLANG_THIN  # 保留LTO配置

      - name: Build kernel and LKM
        working-directory: kernel
        run: |
          # 编译内核镜像、模块及模块安装工具
          make LLVM=1 LLVM_IAS=1 O=${PWD} -j$(nproc) \
            bzImage \          # 内核镜像（可选，主要为了确保配置正确）
            modules \          # 编译所有模块（包括KernelSU）
            modules_install    # 安装模块到指定目录

          # 记录KernelSU模块路径
          echo "ko_path=${PWD}/drivers/kernelsu/kernelsu.ko" >> $GITHUB_ENV

      - name: Verify LKM
        run: |
          # 检查ko文件是否存在
          if [ ! -f "${{ env.ko_path }}" ]; then
            echo "Error: kernelsu.ko not found!"
            exit 1
          fi
          # 打印模块信息（确认架构和依赖）
          modinfo ${{ env.ko_path }}

      - name: Upload kernelsu.ko
        uses: actions/upload-artifact@v4
        with:
          name: kernelsu-ko-fydeos-x86_64-${{ env.version }}-ksu${{ env.kernelsu_version }}
          path: ${{ env.ko_path }}