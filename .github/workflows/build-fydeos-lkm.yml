name: Build FydeOS KernelSU LKM (x86_64) with 6.6 Kernel

on:
  push:
    branches: ["main", "ci", "dev"]
    paths:
      - ".github/workflows/build-fydeos-lkm.yml"
      - "kernel/**"
      - "drivers/kernelsu/**"
  pull_request:
    branches: ["main"]
    paths:
      - ".github/workflows/build-fydeos-lkm.yml"
      - "kernel/**"
      - "drivers/kernelsu/**"
  workflow_dispatch:
    inputs:
      debug:
        description: "Enable debug mode"
        type: boolean
        default: false

env:
  git_tag: chromeos-6.6

jobs:
  build-lkm:
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      actions: read

    env:
      LTO: thin
      KERNEL_DIR: ${{ github.workspace }}/kernel

    steps:
      - name: Free up disk space
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android 2>/dev/null
          df -h

      - name: Install Build Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            bc bison build-essential ca-certificates flex git gnupg \
            libelf-dev libssl-dev lsb-release software-properties-common wget \
            libncurses-dev binutils-x86-64-linux-gnu gcc-x86-64-linux-gnu \
            rsync python3 device-tree-compiler kmod
          sudo ln -sf python3 /usr/bin/python
          pip install ast-grep-cli
          export LLVM_VERSION=16
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh $LLVM_VERSION
          rm ./llvm.sh
          for tool in cl ld.lld llvm-objdump llvm-ar llvm-nm llvm-strip llvm-objcopy llvm-readelf clang++; do
            sudo ln -sf /usr/bin/$tool-$LLVM_VERSION /usr/bin/$tool
          done

      - name: Checkout KernelSU
        uses: actions/checkout@v4
        with:
          path: KernelSU
          fetch-depth: 0

      - name: Setup 6.6 kernel source
        run: |
          git clone --depth=1 --branch ${{ env.git_tag }} \
            https://chromium.googlesource.com/chromiumos/third_party/kernel kernel

      - name: Integrate KernelSU into kernel tree
        working-directory: kernel
        run: |
          echo "[+] Integrating KernelSU into drivers/"
          rm -rf drivers/kernelsu
          ln -sf "$GITHUB_WORKSPACE/KernelSU/kernel" drivers/kernelsu

          DRIVER_MAKEFILE=drivers/Makefile
          if ! grep -q "kernelsu" "$DRIVER_MAKEFILE"; then
            echo 'obj-$(CONFIG_KSU) += kernelsu/' >> "$DRIVER_MAKEFILE"
          fi

          DRIVER_KCONFIG=drivers/Kconfig
          if ! grep -q "drivers/kernelsu/Kconfig" "$DRIVER_KCONFIG"; then
            echo 'source "drivers/kernelsu/Kconfig"' >> "$DRIVER_KCONFIG"
          fi

          sed -i 's/bool "KernelSU support"/tristate "KernelSU support"/' drivers/kernelsu/Kconfig
          sed -i 's/default y/default m/' drivers/kernelsu/Kconfig
          sed -i 's/-dirty//g' scripts/setlocalversion

      - name: Extract kernel version
        working-directory: kernel
        run: |
          VERSION=$(grep -E '^VERSION = ' Makefile | awk '{print $3}')
          PATCHLEVEL=$(grep -E '^PATCHLEVEL = ' Makefile | awk '{print $3}')
          SUBLEVEL=$(grep -E '^SUBLEVEL = ' Makefile | awk '{print $3}')
          echo "version=$VERSION.$PATCHLEVEL.$SUBLEVEL" >> $GITHUB_ENV
          cd $GITHUB_WORKSPACE/KernelSU
          KSU_VERSION=$(($(git rev-list --count HEAD) + 10200))
          echo "kernelsu_version=$KSU_VERSION" >> $GITHUB_ENV

      - name: Configure 6.6 kernel for modules
        working-directory: kernel
        run: |
          export DEFCONFIG=x86_64_defconfig
          make LLVM=1 LLVM_IAS=1 O="${PWD}" mrproper
          make LLVM=1 LLVM_IAS=1 O="${PWD}" ${DEFCONFIG} < /dev/null

          scripts/config --file .config \
            -e MODULES \
            -e MODULE_UNLOAD \
            -m KSU \
            -d MODULE_SIG \
            -d MODULE_SIG_ALL \
            -e LTO_CLANG \
            -d LTO_NONE \
            -e LTO_CLANG_THIN

          echo "[DEBUG] First check for CONFIG_KSU in .config"
          grep CONFIG_KSU .config || true

          if ! grep -q "^CONFIG_KSU=m" .config; then
            echo "ERROR: CONFIG_KSU not set before olddefconfig!"
            exit 1
          fi

          yes "" | make O="${PWD}" olddefconfig

          echo "[DEBUG] Second check for CONFIG_KSU in .config"
          grep CONFIG_KSU .config || true

          if ! grep -q "^CONFIG_KSU=m" .config; then
            echo "WARNING: CONFIG_KSU disabled by olddefconfig, forcing enable..."
            echo "CONFIG_KSU=m" >> .config
          fi

      - name: Analyze kernel config
        working-directory: kernel
        run: |
          echo "===== 内核关键配置检查 ====="
          # 检查 KernelSU 配置（是否为模块模式）
          echo "CONFIG_KSU 状态："
          grep "^CONFIG_KSU=" .config || echo "CONFIG_KSU 未找到！"
    
          # 检查模块编译相关配置
          echo -e "\n模块编译配置："
          grep -E "^CONFIG_MODULES|^CONFIG_MODULE_UNLOAD" .config || echo "模块配置未开启！"
    
          # 检查 LTO 优化配置（匹配工作流的 Thin LTO 设定）
          echo -e "\nLTO 优化配置："
          grep -E "^CONFIG_LTO|^CONFIG_LTO_CLANG" .config || echo "LTO 配置未找到！"
    
          # 检查 KSU 依赖的 OVERLAY_FS（若需）
          echo -e "\nOVERLAY_FS 配置（KSU 依赖）："
          grep "^CONFIG_OVERLAY_FS=" .config || echo "CONFIG_OVERLAY_FS 未开启！"
          # 验证 .config 文件是否存在，以及权限/大小
          echo "===== .config 文件状态检查 ====="
          ls -la .config  # 用 -la 显示隐藏文件，查看是否存在
          if [ -f ".config" ]; then
            echo ".config 文件存在，大小：$(du -sh .config)"
            grep "^CONFIG_KSU=" .config  # 顺带检查关键配置
          else
            echo "ERROR: .config 文件不存在！"
            exit 1  # 若文件不存在，直接中断，避免后续无效步骤
          fi
    
      - name: Build 6.6 kernel and LKM
        working-directory: kernel
        run: |
          timeout 3600 make LLVM=1 LLVM_IAS=1 O=${PWD} -j$(nproc) vmlinux
          timeout 3600 make LLVM=1 LLVM_IAS=1 O=${PWD} -j$(nproc) modules
          timeout 3600 make LLVM=1 LLVM_IAS=1 O=${PWD} -j$(nproc) bzImage
          mkdir -p ./modules
          timeout 3600 make LLVM=1 LLVM_IAS=1 O=${PWD} INSTALL_MOD_PATH=./modules modules_install
          # 保存详细构建日志
          make LLVM=1 LLVM_IAS=1 O=${PWD} -j$(nproc) vmlinux 2>&1 | tee build-vmlinux.log
          make LLVM=1 LLVM_IAS=1 O=${PWD} -j$(nproc) modules 2>&1 | tee build-modules.log
    
          # 单独构建KernelSU模块并捕获详细输出
          echo "[+] Building KernelSU module specifically with debug"
          make LLVM=1 LLVM_IAS=1 O=${PWD} M=drivers/kernelsu V=1 2>&1 | tee build-kernelsu.log || true
    
          # 上传详细构建日志
          echo "[DEBUG] Uploading build logs for analysis"
          ls -lh build-*.log

      - name: Upload build logs
        uses: actions/upload-artifact@v4
        with:
          name: build-debug-logs
          path: kernel/build-*.log
          retention-days: 14  # 修正：正确放置 retention-days

      - name: "Debug: list built .ko files"
        working-directory: kernel
        run: |
          echo "[DEBUG] Listing all .ko files..."
          ls -a
          ls -a ./kernel
          find . -type f -name "*.ko" || echo "No .ko files found"

      - name: "Debug: upload config and KSU build files"
        uses: actions/upload-artifact@v4
        with:
          name: debug-config-ksu
          path: |
            kernel/.config
            kernel/drivers/kernelsu/Kconfig
            kernel/drivers/kernelsu/Makefile
          retention-days: 14  # 修正：正确放置 retention-days

      - name: REAnalyze kernel config
        working-directory: kernel
        run: |
          echo "===== 内核关键配置检查 ====="
          # 检查 KernelSU 配置（是否为模块模式）
          echo "CONFIG_KSU 状态："
          grep "^CONFIG_KSU=" .config || echo "CONFIG_KSU 未找到！"
    
          # 检查模块编译相关配置
          echo -e "\n模块编译配置："
          grep -E "^CONFIG_MODULES|^CONFIG_MODULE_UNLOAD" .config || echo "模块配置未开启！"
    
          # 检查 LTO 优化配置（匹配工作流的 Thin LTO 设定）
          echo -e "\nLTO 优化配置："
          grep -E "^CONFIG_LTO|^CONFIG_LTO_CLANG" .config || echo "LTO 配置未找到！"
    
          # 检查 KSU 依赖的 OVERLAY_FS（若需）
          echo -e "\nOVERLAY_FS 配置（KSU 依赖）："
          grep "^CONFIG_OVERLAY_FS=" .config || echo "CONFIG_OVERLAY_FS 未开启！"
    
      - name: Find kernelsu.ko path
        id: findko
        working-directory: kernel
        run: |
          KO=$(find . -type f -name "kernelsu.ko" | head -n 1)
          if [ -z "$KO" ]; then
            echo "Error: kernelsu.ko not found!"
            exit 1
          fi
          echo "ko_path=${KO}" >> $GITHUB_ENV

      - name: Verify LKM
        run: |
          modinfo "${{ env.ko_path }}"

      - name: Upload kernelsu.ko
        uses: actions/upload-artifact@v4
        with:
          name: kernelsu-ko-fydeos-x86_64-${{ env.version }}-ksu${{ env.kernelsu_version }}
          path: ${{ env.ko_path }}
          retention-days: 14  # 修正：正确放置 retention-days