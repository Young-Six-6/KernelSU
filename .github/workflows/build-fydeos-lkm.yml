name: Build FydeOS KernelSU LKM (x86_64) with 6.6 Kernel

on:
  push:
    branches: ["main", "ci", "dev"]
    paths:
      - ".github/workflows/build-fydeos-lkm.yml"
      - "kernel/**"
      - "drivers/kernelsu/**"
  pull_request:
    branches: ["main"]
    paths:
      - ".github/workflows/build-fydeos-lkm.yml"
      - "kernel/**"
      - "drivers/kernelsu/**"
  workflow_dispatch:
    inputs:
      debug:
        description: "Enable debug mode"
        type: boolean
        default: false

env:
  git_tag: chromeos-6.6

jobs:
  build-lkm:
    if: |
      (github.event_name == 'workflow_dispatch') ||
      (github.event_name == 'push') ||
      (github.event_name == 'pull_request' && !github.event.pull_request.draft)
    name: Build FydeOS x86_64 KernelSU LKM (6.6 Kernel)
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      actions: read

    env:
      LTO: thin
      KERNEL_DIR: ${{ github.workspace }}/kernel

    steps:
      - name: Free up disk space
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android 2>/dev/null
          df -h

      - name: Install Build Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            bc bison build-essential ca-certificates flex git gnupg \
            libelf-dev libssl-dev lsb-release software-properties-common wget \
            libncurses-dev binutils-x86-64-linux-gnu gcc-x86-64-linux-gnu \
            rsync python3 device-tree-compiler kmod
          sudo ln -sf python3 /usr/bin/python
          export LLVM_VERSION=16
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh $LLVM_VERSION
          rm ./llvm.sh
          for tool in clang ld.lld llvm-objdump llvm-ar llvm-nm llvm-strip llvm-objcopy llvm-readelf clang++; do
            sudo ln -sf /usr/bin/$tool-$LLVM_VERSION /usr/bin/$tool
          done

      - name: Checkout KernelSU
        uses: actions/checkout@v4
        with:
          path: KernelSU
          fetch-depth: 0

      - name: Setup 6.6 kernel source
        run: |
          git clone --depth=1 --branch ${{ env.git_tag }} \
            https://chromium.googlesource.com/chromiumos/third_party/kernel kernel

      - name: Integrate KernelSU into kernel tree
        working-directory: kernel
        run: |
          echo "[+] Integrating KernelSU into drivers/"
          ln -sf $GITHUB_WORKSPACE/KernelSU/kernel drivers/kernelsu
          DRIVER_MAKEFILE=drivers/Makefile
          DRIVER_KCONFIG=drivers/Kconfig
          grep -q "kernelsu" "$DRIVER_MAKEFILE" || echo 'obj-$(CONFIG_KSU) += kernelsu/' >> "$DRIVER_MAKEFILE"
          grep -q "kernelsu" "$DRIVER_KCONFIG" || sed -i '/endmenu/i\source "drivers/kernelsu/Kconfig"' "$DRIVER_KCONFIG"
          # 确保Kconfig默认值为模块且无依赖冲突
          sed -i 's/bool "KernelSU support"/tristate "KernelSU support"/' drivers/kernelsu/Kconfig
          sed -i 's/default m/default m\n\tdepends on MODULES/' drivers/kernelsu/Kconfig  # 强制依赖模块支持
          sed -i 's/-dirty//g' scripts/setlocalversion

      - name: Patch defconfig to include KSU (with verification)
        working-directory: kernel
        run: |
          # 明确defconfig路径（避免路径错误）
          DEFCONFIG_PATH="arch/x86/configs/x86_64_defconfig"
          # 备份并强制写入CONFIG_KSU=m
          cp $DEFCONFIG_PATH ${DEFCONFIG_PATH}.bak
          # 先删除可能存在的旧配置（防止重复）
          sed -i '/CONFIG_KSU=/d' $DEFCONFIG_PATH
          echo "CONFIG_KSU=m" >> $DEFCONFIG_PATH
          # 强制开启模块支持（KSU依赖MODULES）
          sed -i '/CONFIG_MODULES=/d' $DEFCONFIG_PATH
          echo "CONFIG_MODULES=y" >> $DEFCONFIG_PATH
          # 验证defconfig修改结果（输出关键内容确认）
          echo "[+] Modified defconfig content:"
          grep -E "CONFIG_KSU|CONFIG_MODULES" $DEFCONFIG_PATH
          # 检查是否写入成功
          grep "CONFIG_KSU=m" $DEFCONFIG_PATH || { echo "Error: Failed to write CONFIG_KSU to defconfig!"; exit 1; }
          grep "CONFIG_MODULES=y" $DEFCONFIG_PATH || { echo "Error: Failed to enable CONFIG_MODULES!"; exit 1; }

      - name: Extract kernel version
        working-directory: kernel
        run: |
          VERSION=$(grep -E '^VERSION = ' Makefile | awk '{print $3}')
          PATCHLEVEL=$(grep -E '^PATCHLEVEL = ' Makefile | awk '{print $3}')
          SUBLEVEL=$(grep -E '^SUBLEVEL = ' Makefile | awk '{print $3}')
          echo "version=$VERSION.$PATCHLEVEL.$SUBLEVEL" >> $GITHUB_ENV
          cd $GITHUB_WORKSPACE/KernelSU
          KSU_VERSION=$(($(git rev-list --count HEAD) + 10200))
          echo "kernelsu_version=$KSU_VERSION" >> $GITHUB_ENV

      - name: Configure 6.6 kernel for modules (with forced KSU)
        working-directory: kernel
        run: |
          export DEFCONFIG=x86_64_defconfig
          DEFCONFIG_PATH="arch/x86/configs/$DEFCONFIG"
          # 清理旧配置
          make LLVM=1 LLVM_IAS=1 O=${PWD} mrproper
          # 生成初始配置（使用修改后的defconfig）
          make LLVM=1 LLVM_IAS=1 O=${PWD} $DEFCONFIG < /dev/null
          # 验证初始.config中是否有KSU（调试用）
          echo "[+] .config after make defconfig:"
          grep -E "CONFIG_KSU|CONFIG_MODULES" .config || echo "KSU not found in initial .config"
          # 补充配置并强制设置KSU（防止olddefconfig覆盖）
          scripts/config --file .config -e MODULES -e MODULE_UNLOAD -d MODULE_SIG -d MODULE_SIG_ALL -e LTO_CLANG -d LTO_NONE -e LTO_CLANG_THIN
          scripts/config --file .config --set-val KSU m  # 强制再次设置KSU
          # 应用配置（使用yes自动确认，但捕获输出）
          yes "" | make O=${PWD} olddefconfig || true
          # 最终验证（必须存在CONFIG_KSU=m）
          echo "[+] Final .config check:"
          grep -E "CONFIG_KSU|CONFIG_MODULES" .config
          grep "^CONFIG_KSU=m" .config || { echo "Error: CONFIG_KSU not set in .config!"; exit 1; }

      - name: Build 6.6 kernel and LKM
        working-directory: kernel
        run: |
          echo "=== Compiling kernel core ==="
          timeout 3600 make LLVM=1 LLVM_IAS=1 O=${PWD} -j$(nproc) vmlinux
          echo "=== Compiling modules ==="
          timeout 3600 make LLVM=1 LLVM_IAS=1 O=${PWD} -j$(nproc) modules
          echo "=== Compiling bzImage ==="
          timeout 3600 make LLVM=1 LLVM_IAS=1 O=${PWD} -j$(nproc) bzImage
          echo "=== Installing modules ==="
          mkdir -p ./modules
          timeout 3600 make LLVM=1 LLVM_IAS=1 O=${PWD} INSTALL_MOD_PATH=./modules modules_install
          echo "ko_path=${PWD}/drivers/kernelsu/kernelsu.ko" >> $GITHUB_ENV

      - name: Verify LKM
        run: |
          if [ ! -f "${{ env.ko_path }}" ]; then
            echo "Error: kernelsu.ko not found!"
            exit 1
          fi
          modinfo ${{ env.ko_path }}

      - name: Upload kernelsu.ko
        uses: actions/upload-artifact@v4
        with:
          name: kernelsu-ko-fydeos-x86_64-${{ env.version }}-ksu${{ env.kernelsu_version }}
          path: ${{ env.ko_path }}
          retention-days: 14