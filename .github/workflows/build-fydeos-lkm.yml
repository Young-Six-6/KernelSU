name: Build FydeOS KernelSU LKM (x86_64) with 6.6 Kernel

on:
  push:
    branches: ["main", "ci", "dev"]
    paths:
      - ".github/workflows/build-fydeos-lkm.yml"
      - "kernel/**"
      - "drivers/kernelsu/**"
  pull_request:
    branches: ["main"]
    paths:
      - ".github/workflows/build-fydeos-lkm.yml"
      - "kernel/**"
      - "drivers/kernelsu/**"
  workflow_dispatch:
    inputs:
      debug:
        description: "Enable debug mode"
        type: boolean
        default: false

env:
  git_tag: chromeos-6.6

jobs:
  build-lkm:
    if: |
      (github.event_name == 'workflow_dispatch') ||
      (github.event_name == 'push') ||
      (github.event_name == 'pull_request' && !github.event.pull_request.draft)
    name: Build FydeOS x86_64 KernelSU LKM (6.6 Kernel)
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      actions: read

    env:
      LTO: thin
      KERNEL_DIR: ${{ github.workspace }}/kernel

    steps:
      - name: Free up disk space
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android 2>/dev/null
          df -h

      - name: Install Build Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            bc bison build-essential ca-certificates flex git gnupg \
            libelf-dev libssl-dev lsb-release software-properties-common wget \
            libncurses-dev binutils-x86-64-linux-gnu gcc-x86-64-linux-gnu \
            rsync python3 device-tree-compiler kmod
          sudo ln -sf python3 /usr/bin/python
          export LLVM_VERSION=16
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh $LLVM_VERSION
          rm ./llvm.sh
          for tool in clang ld.lld llvm-objdump llvm-ar llvm-nm llvm-strip llvm-objcopy llvm-readelf clang++; do
            sudo ln -sf /usr/bin/$tool-$LLVM_VERSION /usr/bin/$tool
          done

      - name: Checkout KernelSU
        uses: actions/checkout@v4
        with:
          path: KernelSU
          fetch-depth: 0

      - name: Setup 6.6 kernel source
        run: |
          git clone --depth=1 --branch ${{ env.git_tag }} \
            https://chromium.googlesource.com/chromiumos/third_party/kernel kernel

      - name: Fix Kconfig syntax and integrate KernelSU
        working-directory: kernel
        run: |
          echo "[+] Fixing Kconfig syntax and integrating KernelSU"
          # 确保符号链接正确
          rm -rf drivers/kernelsu
          ln -sf $GITHUB_WORKSPACE/KernelSU/kernel drivers/kernelsu
          
          # 验证Kernelsu目录和Kconfig存在
          if [ ! -d "drivers/kernelsu" ]; then
            echo "Error: drivers/kernelsu directory missing!"
            exit 1
          fi
          KSU_KCONFIG=drivers/kernelsu/Kconfig
          if [ ! -f "$KSU_KCONFIG" ]; then
            echo "Error: $KSU_KCONFIG missing!"
            exit 1
          fi
          
          # 修复Kconfig语法错误（关键步骤）
          # 1. 移除多余的endmenu（无对应menu）
          # 2. 确保子选项正确缩进（依赖于父选项KSU）
          # 3. 标准化配置结构
          cat > "$KSU_KCONFIG" <<'EOF'
config KSU
	tristate "KernelSU support"
	default m
	depends on MODULES
	help
	  Enable kernel-level root privileges on Android System.
	  To compile as a module, choose M here: the
	  module will be called kernelsu.

config KSU_DEBUG
	bool "KernelSU debug mode"
	depends on KSU
	default n
	help
	  Enable KernelSU debug mode.
EOF
          # 验证Kconfig内容
          echo "[+] Fixed Kconfig content:"
          cat "$KSU_KCONFIG"
          
          # 修复drivers/Kconfig集成（正确添加source语句）
          DRIVER_KCONFIG=drivers/Kconfig
          sed -i '/source "drivers\/kernelsu\/Kconfig"/d' "$DRIVER_KCONFIG"
          echo 'source "drivers/kernelsu/Kconfig"' >> "$DRIVER_KCONFIG"
          if ! grep -q 'source "drivers/kernelsu/Kconfig"' "$DRIVER_KCONFIG"; then
            echo "Error: Failed to add Kconfig source entry!"
            exit 1
          fi
          
          # 修复drivers/Makefile集成（正确引用CONFIG_KSU，避免命令执行错误）
          DRIVER_MAKEFILE=drivers/Makefile
          # 使用单引号包裹，避免$被解析为变量
          sed -i '/obj-$(CONFIG_KSU) += kernelsu\//d' "$DRIVER_MAKEFILE"
          echo 'obj-$(CONFIG_KSU) += kernelsu/' >> "$DRIVER_MAKEFILE"
          # 检查Makefile条目是否添加成功（使用单引号确保字符串匹配）
          if ! grep -q 'obj-$(CONFIG_KSU) += kernelsu/' "$DRIVER_MAKEFILE"; then
            echo "Error: Failed to add Makefile entry!"
            exit 1
          fi

      - name: Patch defconfig to include KSU
        working-directory: kernel
        run: |
          DEFCONFIG_PATH="arch/x86/configs/x86_64_defconfig"
          cp "$DEFCONFIG_PATH" "${DEFCONFIG_PATH}.bak"
          sed -i '/CONFIG_KSU=/d' "$DEFCONFIG_PATH"
          sed -i '/CONFIG_MODULES=/d' "$DEFCONFIG_PATH"
          echo "CONFIG_MODULES=y" >> "$DEFCONFIG_PATH"
          echo "CONFIG_KSU=m" >> "$DEFCONFIG_PATH"
          grep -E "CONFIG_KSU|CONFIG_MODULES" "$DEFCONFIG_PATH"

      - name: Extract kernel version
        working-directory: kernel
        run: |
          VERSION=$(grep -E '^VERSION = ' Makefile | awk '{print $3}')
          PATCHLEVEL=$(grep -E '^PATCHLEVEL = ' Makefile | awk '{print $3}')
          SUBLEVEL=$(grep -E '^SUBLEVEL = ' Makefile | awk '{print $3}')
          echo "version=$VERSION.$PATCHLEVEL.$SUBLEVEL" >> $GITHUB_ENV
          cd $GITHUB_WORKSPACE/KernelSU
          KSU_VERSION=$(($(git rev-list --count HEAD) + 10200))
          echo "kernelsu_version=$KSU_VERSION" >> $GITHUB_ENV

      - name: Configure kernel and verify KSU
        working-directory: kernel
        run: |
          export DEFCONFIG=x86_64_defconfig
          make LLVM=1 LLVM_IAS=1 O=${PWD} mrproper
          
          # 检查Kconfig是否识别CONFIG_KSU
          if ! scripts/config --list | grep -q "CONFIG_KSU"; then
            echo "Error: Kconfig still does not recognize CONFIG_KSU!"
            exit 1
          fi
          
          make LLVM=1 LLVM_IAS=1 O=${PWD} $DEFCONFIG < /dev/null
          scripts/config --file .config --set-val KSU m
          make O=${PWD} olddefconfig < <(echo -e "n\nn")
          
          grep "^CONFIG_KSU=m" .config || { echo "Error: CONFIG_KSU not set!"; exit 1; }

      - name: Build kernel and LKM
        working-directory: kernel
        run: |
          make LLVM=1 LLVM_IAS=1 O=${PWD} -j$(nproc) vmlinux
          make LLVM=1 LLVM_IAS=1 O=${PWD} -j$(nproc) modules
          mkdir -p ./modules
          make LLVM=1 LLVM_IAS=1 O=${PWD} INSTALL_MOD_PATH=./modules modules_install
          echo "ko_path=${PWD}/drivers/kernelsu/kernelsu.ko" >> $GITHUB_ENV

      - name: Verify LKM
        run: |
          if [ ! -f "${{ env.ko_path }}" ]; then
            echo "Error: kernelsu.ko not found!"
            exit 1
          fi
          modinfo ${{ env.ko_path }}

      - name: Upload kernelsu.ko
        uses: actions/upload-artifact@v4
        with:
          name: kernelsu-ko-fydeos-x86_64-${{ env.version }}-ksu${{ env.kernelsu_version }}
          path: ${{ env.ko_path }}
          retention-days: 14
